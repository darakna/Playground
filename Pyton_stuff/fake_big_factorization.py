import binascii
import base64

req_n = "5203054907932715072219463010433671501242324999101031961778551414523203642794654633954122128718395475257091609045094294305282429283375416003959025668410070733743"
resp_n = "131618988864947543213776229531634193412737234854212651796818129365118569829291789642298561838219946234914193882865537745361589944691738337361923969834323672753213"


#req_n = "321682001638621484560335075095507393230746499319112395413345734508561395841716256209503480440122408356196694552170136827691509607517848131461840553581088359803526847604866029189"
#resp_n = "129933656511779963167442542838852527261285746367852251381491658328954729449657923715297657634799729363497601683837417149328627845965213565543021934386297536927567961363693245472667"

#req_n = "132752679009221621974424157119055405668892042595778428973751767008896088687960962058901693159841975248499249835571219034924880485719595053013906268929618431426022723233136913645060276155426395971"
#resp_n = "121912844982339629176832774451185569235725668957286601326991833849575967441611698281396529582394583714754529674837173412218177687691781396442281828465865117438279845726846959841393955282492411534487"

req_n = "4524534914863856075318572321251413488936046039067401564596991828706906852704171724928727799968714377343721934522283998377651546992172322004415314402246051761653738903416118187189"
resp_n = "254239257533814359267852692761437331391922428319477921595965149711974391684634973376665789732855676833477979795253392954532649849776372456667217889116832653486841943556221436464217"

#req_n = "1893337371170074321646616782232907752619374562068712860454591829671881387602079105829821458728608198515060273004738560920851587297336513881468192796945266862542950950920462165307"
#resp_n = "158411637293917703298313128588223857349676152117948267465736224998959757611165578765169507656269526538265291767399699459739917837736937622125341974762215384448371978798789241515497"

numb_req = int(req_n)
numb_resp = int(resp_n)

def is_3(big_n):
    if len(big_n) == 0:
        return 0
    elif len(big_n) == 1:
        return int(big_n)
    else:
        return int(big_n[0]) + is_3(big_n[1:])

def findAllFactors(number):
    factors = list()
    for i in range(1, number):
        if number % i == 0:
            factors.append(i)
    return factors


def isPrime(n):
    n = abs(int(n))
    if n < 2:
        return 0
    if n == 2:
        return 1
    if not n & 1:
        return 0
    for x in range(3, int(n ** 0.5) + 1, 2):
        if n % x == 0:
            return 0
    return 1

def long_search(arg_num):
    factors = findAllFactors(arg_num)
    primeFactors = list()
    for f in factors:
        if isPrime(f) == 1:
            primeFactors.append(f)
    primeFactors.sort()
    print("%d" % (primeFactors[-1]))

def short_search(arg_num):
    #F = factor(arg_num)
    arg_num.sagemath.factor()

if __name__ == "__main__":
    print(len(req_n), len(resp_n))
    for lenght in range(1, len(resp_n)):
        if int(numb_req % int(resp_n[0:lenght])) == 0:
            print("%s %s = %s" % (req_n, resp_n[0:lenght], numb_req % int(resp_n[0:lenght])))
            print("%s" % int(numb_req / int(resp_n[0:lenght]) * int(resp_n[0:lenght])))

    #print(binascii.hexlify((req_n.encode())))
    #print(binascii.hexlify((resp_n.encode())))
    #print(binascii.hexlify((str(numb_resp - numb_req).encode())))
    #print(base64.b64encode(req_n.encode()))
    #print(base64.b64encode(resp_n.encode()))
    #print(base64.b64encode(str(numb_resp - numb_req).encode()))
    #print(bin(numb_req))
    #print(bin(numb_resp))
    #print(bin(numb_resp - numb_req))
    #print(numb_resp)
    #print(numb_req)
    #print(numb_resp - numb_req)
    #print(numb_req / numb_resp)
    #print(numb_resp % numb_req)

